rows := lines ! read_file "input.txt";

y := 0;
x := 0;
for (r, row <- enumerate(rows)) (
  for (c, char <- enumerate(row)) (
    if (char == 'S') (
      y,x = r,c;
      break;
    )
  )
);

# .....
# .....
# ..S..
# .....
# .....

dirs := {
  V(1, 0): { # right
    '-': V(1, 0), # sends you right
    '7': V(0, 1), # sends you down
    'J': V(0, -1), # sends you up
  },
  V(0, 1): { # down
    '|': V(0, 1), # sends you down
    'J': V(-1, 0), # sends you left
    'L': V(1, 0), # sends you right
  },
  V(-1, 0): { # left
    '-': V(-1, 0), # sends you left
    'L': V(0, -1), # sends you up
    'F': V(0, 1), # sends you down
  },
  V(0, -1): { # up
    '|': V(0, -1), # sends you up
    '7': V(-1, 0), # sends you left
    'F': V(1, 0), # sends you the right
  },
};

get := \xy -> rows[xy[1]][xy[0]];

inbounds_neighbor_poss := \pos -> (
  items(dirs).map(\(dir, nextmap) -> (
    next_pos := dir+pos;
    nbor_val := try get next_pos catch _ -> return null;
    try (
      next_next_pos := nextmap[nbor_val] + next_pos;
      get next_next_pos;
      next_next_pos
    ) catch _ -> null
  )).filter(id)
);

struct Frame (pos, prevs);

start := V(x, y);
stack := [Frame(start, [])];
collect := [];
seen := {};

score := \frame -> int((len(frame.prevs) + 1));

while (stack) (
  frame := pop stack;

  if (frame.pos in seen) continue;
  seen |.= frame.pos;

  for (nbor_pos <- inbounds_neighbor_poss(frame.pos)) (
    nbor_val := get nbor_pos;
    if ((nbor_val == 'S') and (len(frame.prevs) > 1)) (
      if ((frame.prevs)[1] != frame.pos) (
        print('got one', score(frame));
        collect +.= frame;
      );
    );
    if (nbor_pos in frame.prevs) continue;
    stack +.= Frame(nbor_pos, frame.prevs +. frame.pos);
  );
);

#collect = reverse ! sort_on score ! collect;

#collect +.= int((len(frame.prevs) + 1));
c := collect[0];
new_rows := rows;
for (pos <- (c.prevs)[1:]) (
  new_rows[pos[1]][pos[0]] = 'X';
);

for (row <- new_rows) (
  print(row join "");
);
